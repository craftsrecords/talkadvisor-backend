package org.craftsrecords.talkadvisor.recommendation.assertions.generated

import org.assertj.core.api.AbstractObjectAssert
import org.assertj.core.util.Objects
import org.craftsrecords.talkadvisor.recommendation.talk.Talk
import org.craftsrecords.talkadvisor.recommendation.talk.TalkFormat

/**
 * Abstract base class for [Talk] specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = ["assertj-assertions-generator"])
abstract class AbstractTalkAssert<S : AbstractTalkAssert<S, A>, A : Talk>
/**
 * Creates a new `[AbstractTalkAssert]` to make assertions on actual Talk.
 * @param actual the Talk we want to make assertions on.
 */
protected constructor(actual: A, selfType: Class<S>) : AbstractObjectAssert<S, A>(actual, selfType) {

    /**
     * Verifies that the actual Talk's duration is equal to the given one.
     * @param duration the given duration to compare the actual Talk's duration to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Talk's duration is not equal to the given one.
     */
    infix fun `has duration`(duration: java.time.Duration): S {
        // check that actual Talk we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting duration of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualDuration = actual.duration
        if (!Objects.areEqual(actualDuration, duration)) {
            failWithMessage(assertjErrorMessage, actual, duration, actualDuration)
        }

        // return the current assertion for method chaining
        return myself
    }

    /**
     * Verifies that the actual Talk's format is equal to the given one.
     * @param format the given format to compare the actual Talk's format to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Talk's format is not equal to the given one.
     */
    infix fun `has format`(format: TalkFormat): S {
        // check that actual Talk we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting format of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualFormat = actual.format
        if (!Objects.areEqual(actualFormat, format)) {
            failWithMessage(assertjErrorMessage, actual, format, actualFormat)
        }

        // return the current assertion for method chaining
        return myself
    }

    /**
     * Verifies that the actual Talk's id is equal to the given one.
     * @param id the given id to compare the actual Talk's id to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Talk's id is not equal to the given one.
     */
    infix fun `has id`(id: String): S {
        // check that actual Talk we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualId = actual.id
        if (!Objects.areEqual(actualId, id)) {
            failWithMessage(assertjErrorMessage, actual, id, actualId)
        }

        // return the current assertion for method chaining
        return myself
    }

    /**
     * Verifies that the actual Talk's title is equal to the given one.
     * @param title the given title to compare the actual Talk's title to.
     * @return this assertion object.
     * @throws AssertionError - if the actual Talk's title is not equal to the given one.
     */
    infix fun `has title`(title: String): S {
        // check that actual Talk we want to make assertions on is not null.
        isNotNull

        // overrides the default error message with a more explicit one
        val assertjErrorMessage = "\nExpecting title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>"

        // null safe check
        val actualTitle = actual.title
        if (!Objects.areEqual(actualTitle, title)) {
            failWithMessage(assertjErrorMessage, actual, title, actualTitle)
        }

        // return the current assertion for method chaining
        return myself
    }

}
